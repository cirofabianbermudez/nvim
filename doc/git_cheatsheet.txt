*git_cheatsheet.txt*	Git/GitHub/GitLab cheatsheet inside Neovim

================================================================================
GITCHEATSHEET                                                     *git.cheat*

Note:
  This cheat sheet is based on the following sources:
  https://education.github.com/git-cheat-sheet-education.pdf
  https://training.github.com/downloads/github-git-cheat-sheet.pdf
  https://git-scm.com/book/en/v2

Git is the free and open source distributed version control system that's 
responsible for everything GitHub related that happens locally on your computer.
This cheat sheet features the most important and commonly used Git commands for
easy reference.

Column heading~

Setup:                                                    *git.cheat.setup*
  Configuring user information used across all local repositories 

    Set a name that is identifiable for credit when review version history ]
      git config --global user.name "[username]"
<
    Set an email address that will be associated with each history marker >
      git config --global user.email "[username]"
<
    Set automatic command line coloring for Git for easy reviewing >
      git config --global color.ui auto
<

Init:                                                    *git.cheat.init*
  Configuring user information, initializing and cloning repositories

  Initialize an existing directory as a Git repository >
    git init
<
  Retrieve an entire repository from a hosted location via URL >
    git clone [url]
<

Stage and snapshot:                                    *git.cheat.snapshot*
  Working with snapshots and the Git staging area

  Show modified files in working directory, staged for your next commit >
    git status
<
  Add a file as it looks now to your next commit (stage) >
    git add [file]
<
  Unstage a file while retaining the changes in working directory >
    git reset [file]
<
  Diff of what is changed but not staged >
    git diff
<
  Diff of what is staged but not yet committed >
    git diff --staged
<
  Commit your staged content as a new commit snapshot >
    git commit -m “[descriptive_message]”
<

Branch and Merge:                                *git.cheat.branch*
  Isolating work in branches, changing context, and integrating changes

  List your branches. a * will appear next to the currently active branch >
    git branch
<
  Create a new branch at the current commit >
    git branch [branch-name]
<
  Switch to another branch and check it out into your working directory >
    git checkout
<
  Merge the specified branch’s history into the current one >
    git merge [branch]
<
  Show all commits in the current branch’s history >
    git log
<

Inspect and Compare:                             *git.cheat.inspect*
  Examining logs, diffs and object information

  Show the commit history for the currently active branch >
    git log
<
  Show the commits on branchA that are not on branchB >
    git log branchB..branchA
<
  Show the commits that changed file, even across renames >
    git log --follow [file]
<
  Show the diff of what is in branchA that is not in branchB >
    git diff branchB...branchA
<
  Show any object in Git in human-readable format >
    git show [SHA]
<

Share and Update:                                  *git.cheat.update*
  Retrieving updates from another repository and updating local repos

  Add a git URL as an alias >
    git remote add [alias] [url]
<
  Fetch down all the branches from that Git remote >
    git fetch [alias]
<
  Merge a remote branch into your current branch to bring it up to date >
    git merge [alias]/[branch]
<
  Transmit local branch commits to the remote repository branch >
    git push [alias] [branch]
<
  Fetch and merge any commits from the tracking remote branch >
    git pull
<

Tracking Path Changes:                             *git.cheat.tracking*
  Versioning file removes and path changes

  Delete the file from project and stage the removal for commit >
    git rm [file]
<
  Change an existing file path and stage the move >
    git mv [existing-path] [new-path]
<
  Show all commit logs with indication of any paths that moved >
    git log --stat -M
<

Rewrite History:                                    *git.cheat.history*
  Rewriting branches, updating commits and clearing history

  Apply any commits of current branch ahead of specified one >
    git rebase [branch]
<
  Clear staging area, rewrite working tree from specified commit >
    git reset --hard [commit]
<

Temporary Commits:                                *git.cheat.temporary*
  Temporarily store modified, tracked files in order to change branches

  Save modified and staged changes >
    git stash
<
  List stack-order of stashed file changes >
    git stash list
<
  Write working from top of stash stack >
    git stash pop
<
  Discard the changes from top of stash stack >
    git stash drop
<

Ignoring Patterns:                             *git.cheat.ignore*
  Preventing unintentional staging or commiting of files

  System wide ignore pattern for all local repositories >
    git config --global core.excludesfile [file]
<
      logs/
      *.notes
      pattern*/

  Save a file with desired patterns as .gitignore with either direct string
  matches or wildcard globs.

Note:
  Create the tags file using `:helptags ../doc`

================================================================================
vim:tw=80:ts=2:ft=help:norl:syntax=help:
